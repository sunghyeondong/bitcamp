plugins {
    id 'java'
    id 'eclipse-wtp'
    id 'war'
}

compileJava {
    options.encoding = "UTF-8"
}

eclipse {
    wtp {
        facet {
            facet name:'jst.web', version:'3.1'
        }
    }
}

dependencies {
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.0.6.RELEASE'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    
    // JSP 확장 태그 JSTL 라이브러리
    compile group: 'javax.servlet', name: 'jstl', version: '1.2'

    // 파일 업로드 관련 라이브러리
    // => Servlet 3.0에서 제공하는 멀티파트 처리기를 사용할 때는 이 라이브러리가 필요가 없다.
    //compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'
    
    // @Controller가 붙은 일반적인 페이지 컨트롤러의 요청 핸들러를 실행할 때
    // 요청 파라미터의 문자열을 int나 boolean 등으로 바꾸기 위해
    // 기본으로 장착된 변환기를 사용한다.
    // 그 변환기는 HttpMessageConverter 규칙에 따라 만든 변환기이다.
    
    // 그런데 @RestController 애노테이션이 붙은 페이지 컨트롤러의 요청 핸들러를 실행할 때
    // 스프링은 기본 데이터 변환기로서 MappingJackson2HttpMessageConverter를 사용한다.
    // 이 컨버터는 JSON 데이터를 처리 할 수 있다.
    
    // MappingJackson2HttpMessageConverter?
    // => 요청 파라미터로 JSON 문자열을 받으면 요청 핸들러를 호출할 때 자바 객체로 변환시킨다.
    // => 요청 핸들러가 자바 객체를 리턴할 때 JSON 문자열로 변환한다.

    // 주의!
    // => MappingJackson2HttpMessageConverter를 사용하려면 이 객체가 의존하는 라이브러리를
    //    다음과 같이 추가해야 한다.
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    
    // 그런데 JSON 데이터를 처리할 때
    // MappingJackson2HttpMessageConverter 대신 GsonHttpMessageConverter를 사용할 수 있다.
    // 단 GsonHttpMessageConverter를 사용하려면 이 객체가 의존하는 라이브러리를
    // 다음과 같이 추가해야 한다.
    // 즉, Jackson 또는 Gson 둘 중 한 개의 라이브러리만 추가하라!
    //compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.8'
    
    compile 'com.google.guava:guava:23.0'
    testCompile 'junit:junit:4.12'
    
}

repositories {
    jcenter()
}